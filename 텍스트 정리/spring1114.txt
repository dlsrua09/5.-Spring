< 미니프로젝트 >
- 주제: 기존에 운영되고 있는 사이트를 벤치마킹해서 화면 구현 및 기능구현
- 조:장찬영 고은별, 김도원, 김동건, 김동현, 김인겸

- 구글-> staruml-> 검색후 들어가서 다운.

-10번 프로젝트 복사: -012_Framework_BussniessComponent하고,
- com.ezen.spring.service 패키지 만들기.
- com.ezen.spring.impl 패키지도 만들기.
- 왼쪽위에 점점점(workset같은)거 누르고 패키지- 아래 누르기.(패키지 이름대로 짤라짐.)
- service패키지- 인터페이스 BoardService 만들기.
- service패키지 안에- impl패키지 만들고, 그 안에
- class BoardServiceImpl,  class BoardDAO 만들기


- BoardService에서
// CRUD(Create Read Update Delete) 기능의 메소드 구현(CRUD만 잘해도 칭찬받음)
	// 글 등록
	void insertBoard();
	
	// 글 수정
	void updateBoard();
	
	// 글 삭제
	void deleteBoard();
	
	// 글 상세 조회
	void getBoard();
	
	// 글 목록 조회
	void getBoardList();

작성하고, 

- mysql workbench 들어가기.
- root접속(비밀번호 1234)
- 왼쪽아래 schema에서 왼쪽 여백에 우클릭 new 스키마-  studydb name달고 apply
- 왼쪽아래 adminstraction-> user and priviledges 들어가기.
- id : study, pw: !ezen1234, 오른쪽 칸(Schema Privileges) 눌러서 studydb 누르고, apply all인가 권한 전부 주기.
- 권한을 다 줬으면 나와서 아이디 만드는 창으로 가기.
- 아이디는 study, 그리고 맨 아래는 스키마창으로 갈거니까 studydb(아까만든 스키마이름) 쓰고,
- 비밀번호 입력은 !ezen1234 입력하고, 저장한다음에 study아이디 들어가기.

- 테이블을 만들거임.
- CREATE TABLE BOARD(
 BOARD_NO int primary key,
 BOARD_TITLE VARCHAR(200),
 BOARD_CONTENT VARCHAR(2000),
 BOARD_WRITER VARCHAR(20),
 BOARD_REGDATE DATETIME,
 BOARD_CNT int
 );

만들기.(실행 컨트롤 엔터), 이하 쭉 실행하기.

INSERT INTO BOARD VALUES(1, '가입인사', '잘 부탁드립니다.', '관리자', now(), 0);
select * from BOARD;

- sts로 넘어와서
- pakage vo생성, class BoardVO 생성하기. 그안에


private int boardNo;
	private String boardTitle;
	private String boardContent;
	private String boardWriter;
	private Date boardRegdate;
	private int boardCnt;

알트 쉬프트 s -> selectall -> 생성
-> 다시 BoardService로 가기.

// CRUD(Create Read Update Delete) 기능의 메소드 구현(CRUD만 잘해도 칭찬받음)
	// 글 등록
	void insertBoard(BoardVO boardVO);
	
	// 글 수정
	void updateBoard(BoardVO boardVO);
	
	// 글 삭제
	void deleteBoard(BoardVO boardVO);
	
	// 글 상세 조회, 1개도 출력할 수 있으니께 BoardVO
	BoardVO getBoard(BoardVO boardVO);
	
	// 글 목록 조회, 개수를 조회할거니까(List)
	List<BoardVO> getBoardList(); 
로 설정.

BoardServiceImpl가서  implements BoardService 작성 (컨트롤 쉬프트 o)
@Override
	public void insertBoard(BoardVO boardVO) {
		
	}
	
	@Override
	public void updateBoard(BoardVO boardVO) {
		
	}
	
	@Override
	public void deleteBoard(BoardVO boardVO) {
		
	}
	
	// 에러는 리턴값이 있는데 리턴값을 안적어서 에러남.
	@Override
	public BoardVO getBoard(BoardVO boardVO) {
		return null;
	}
	
	
	@Override
	public List<BoardVO> getBoardList() {
		return null;
	}
작성.

import, class사이에: 

// ServiceImpl: 비즈니스 로직을 구현하는 클래스
// 예를 들면, 공과금 납부할때 할인을 계산
// 스마트폰의 시리얼 번호 자동 생성...
// 비즈니스 로직 처리가 완료된 데이터를 DB에 넣기 위해서 DAO 객체를 의존성 주입하여 사용

작성

BoardDAO 클래스로 이동.

class 위에:
// DAO: DB에 접근하여 쿼리를 수행하는 클래스
// DAO는 @Repository 어노테이션을 이용하여 객체 자동 생성
// @Controller, @Service, @Repository는 다 @Component 어노테이션을 상속 받았다.
// 각각 Controller, ServiceImpl, DAO 클래스에 특화된 기능들을 Component보다 더 제공
작성하고, 

// JDBC 관련 변수
	private Connection conn = null;
	private PreparedStatement stmt = null;
	private ResultSet rs = null;
	
	// SQL 쿼리
	private final String BOARD_INSERT = "INSERT INTO BOARD VALUES((SELECT IFNULL(MAX(A.BOARD_NO),0) + 1 FROM BOARD A), ?, ?, ?, now(), 0)";
	private final String BOARD_UPDATE = "UPDATE BOARD SET BOARD_TITLE = ?, BOARD_CONTENT = ?, BOARD_WRITER =? WHERE BOARD_NO = ?";
	private final String BOARD_DELETE = "DELETE FROM BOARD WHERE BOARD_NO = ?";
	private final String BOARD_GET = "SELECT * FROM BOARD WHERE BOARD_NO = ?";
	private final String BOARD_LIST = "SELECT * FROM BOARD ORDER BY BOARD_NO DESC";
	
	// CRUD 기능 구현
	public void insertBoard(BoardVO boardVO) {
		
	}

하고, 
com.ezen.spring.common 패키지만들고, class JDBCUtil 만들기.
그 안에다가, 

- c드라이브에
C:\Program Files (x86)\MySQL\Connector J 8.0  -> connector-j-8.0.31.jar
이 경로를 이용할거임,.
sts에서 
맨밑 src-main-webapp-WEB_INF에 다가 폴더(lib)만들고, mysql-connector-j-8.0.31붙혀넣기
다하고, 프로젝트 우클릭, 프로퍼티 -> 
java build path - 위에 libraries - classpath- add library ->  web app libraries -> next -> finish
apply and close하면, 프로젝트 펼쳐보면 아래 Web App Libraries가 생김.
이거 먼저하고, 
클래스 입력


public static Connection getConnection() {
		try {
			// 사용할 DBMS의 Driver 로드
			Class.forName("com.mysql.jdbc.Driver");
			
			// DriverManager 객체를 이용해서 Connection을 가져와서 리턴
			// getConnection메소드의 매개변수로 DB의 url, username, password를 넘겨준다.
			return DriverManager.getConnection("jdbc:mysql://localhost:3306/studydb?serverTimezone=UTC", "study", "!ezen1234");
		} catch(Exception e) {
			System.out.println(e.getMessage());
		}
		return null;
	}
	
	// 2개의 close 메소드
	// ResultSet이 없는 메소드(insertBoard, updateBoard, deleteBoard)
	// ResultSet이 있는 메소드(getBoard, getBoardList)
	
	// ResultSet이 없는 메소드(insertBoard, updateBoard, deleteBoard)
	public static void close(PreparedStatement stmt, Connection conn) {
		if (stmt != null) {
			try {
				if ( !stmt.isClosed()) {
					stmt.close();
				}
			} catch(Exception e) {
				System.out.print(e.getMessage());
			} finally {
				stmt = null;
			}
		}
		
		if (conn != null) {
			try {
				if ( !conn.isClosed()) {
					conn.close();
				}
			} catch(Exception e) {
				System.out.print(e.getMessage());
			} finally {
				conn = null;
			}
		}
	}
	
	// ResultSet이 있는 메소드(getBoard, getBoardList)
	public static void close(ResultSet rs, PreparedStatement stmt, Connection conn) {
		if ( rs != null ) {
			try {
				if (!rs.isClosed()) {
					rs.close();
				}
			} catch(Exception e) {
				System.out.println(e.getMessage());
			} finally {
				rs = null;
			}
		}
		
		if (stmt != null) {
			try {
				if ( !stmt.isClosed()) {
					stmt.close();
				}
			} catch(Exception e) {
				System.out.print(e.getMessage());
			} finally {
				stmt = null;
			}
		}
		
		if (conn != null) {
			try {
				if ( !conn.isClosed()) {
					conn.close();
				}
			} catch(Exception e) {
				System.out.print(e.getMessage());
			} finally {
				conn = null;
			}
		}
	}

다했으면, 클래스 BoardDAO로 가서, // CRUD 기능 구현을 할거다.

// CRUD 기능 구현
	public void insertBoard(BoardVO boardVO) {
		System.out.println("JDBC로 insertBoard 기능 구현");
		try {
			// DB 커넥션 가져오기.
			conn = JDBCUtil.getConnection();
			
			// 실행될 쿼리문 설정
			stmt = conn.prepareStatement(BOARD_INSERT);
			
			// 쿼리문에 포함된 인자값 설정
			stmt.setString(1, boardVO.getBoardTitle());
			stmt.setString(2,  boardVO.getBoardContent());
			stmt.setString(3, boardVO.getBoardWriter());
			
			// 쿼리문 실행
			stmt.executeUpdate();
			
		} catch(Exception e) {
			System.out.println(e.getMessage());
		} finally {
			JDBCUtil.close(stmt, conn);
		}
	}
	
	// 글 수정
	public void updateBoard(BoardVO boardVO) {
		System.out.println("JDBC로 updateBoard 기능구현");
		try {
			conn = JDBCUtil.getConnection();
			
			stmt = conn.prepareStatement(BOARD_UPDATE);
			
			stmt.setString(1, boardVO.getBoardTitle());
			stmt.setString(2, boardVO.getBoardContent());
			stmt.setString(3, boardVO.getBoardWriter());
			stmt.setInt(4, boardVO.getBoardNo());
			
			stmt.executeUpdate();
			
		} catch(Exception e) {
			System.out.println(e.getMessage());
		} finally {
			JDBCUtil.close(stmt, conn);
		}
	}
	
	// 글 삭제
	public void deleteBoard(BoardVO boardVO) {
		System.out.println("JDBC로 deleteBoard 기능구현");
		try {
			conn = JDBCUtil.getConnection();
			
			stmt = conn.prepareStatement(BOARD_DELETE);
			
			stmt.setInt(1, boardVO.getBoardNo());
			
			stmt.executeUpdate();
			
		} catch(Exception e) {
			System.out.println(e.getMessage());
		} finally {
			JDBCUtil.close(stmt, conn);
		}
	}
	
	// 글 상세 조회
	public BoardVO getBoard(BoardVO boardVO) {
		System.out.println("JDBC로 getBoard 기능구현");
		// 조회해온 ResultSet 담을 BoardVO 객체 선언
		BoardVO board = new BoardVO();
		try {
			conn = JDBCUtil.getConnection();
			
			stmt = conn.prepareStatement(BOARD_GET);
			
			stmt.setInt(1, boardVO.getBoardNo());
			
			rs = stmt.executeQuery();
			
			if ( rs.next() ) {
				// 위에서 선언한 BoardVO 객체에 조회 결과 세팅
				board.setBoardNo(rs.getInt("BOARD_NO"));
				board.setBoardTitle(rs.getString("BOARD_TITLE"));
				board.setBoardContent(rs.getString("BOARD_CONTENT"));
				board.setBoardWriter(rs.getString("BOARD_WRITER"));
				board.setBoardCnt(rs.getInt("BOARD_CNT"));
			}
			
		} catch(Exception e) {
			System.out.println(e.getMessage());
		} finally {
			JDBCUtil.close(rs, stmt, conn);
		}
		
		return board;
	}
	
	// 글 목록 조회
	public List<BoardVO> getBoardList() {
		System.out.println("JDBC로 getBoardList 기능구현");
		
		// 글 목록을 담아줄 List 선언
		List<BoardVO> boardList = new ArrayList<BoardVO>();
		try {
			conn = JDBCUtil.getConnection();
			
			stmt = conn.prepareStatement(BOARD_LIST);
			
			rs = stmt.executeQuery();
			
			while ( rs.next() ) {
				// rs에서 BoardVO객체에 하나씩 담아서 List에 추가
				BoardVO board = new BoardVO();
				
				board.setBoardNo(rs.getInt("BOARD_NO"));
				board.setBoardTitle(rs.getString("BOARD_TITLE"));
				board.setBoardContent(rs.getString("BOARD_CONTENT"));
				board.setBoardWriter(rs.getString("BOARD_WRITER"));
				board.setBoardCnt(rs.getInt("BOARD_CNT"));
			}
			
		} catch(Exception e) {
			System.out.println(e.getMessage());
		} finally {
			JDBCUtil.close(rs, stmt, conn);
		}
		
		return boardList;
	}

------------------
BoardServiceImpl 클래스 와서
클래스 위에 @Service생성

클래스 밑에

// 의존성 주입할 DAO 객체
	@Autowired
	BoardDAO boardDAO;

	// 기본 게시판이라 따로 처리해야줘야될 비즈니스 로직이 없어서,
	// 바로 DAO의 메소드를 호출하여 DB조작
	@Override
	public void insertBoard(BoardVO boardVO) {
		boardDAO.insertBoard(boardVO);
	}
	
	@Override
	public void updateBoard(BoardVO boardVO) {
		boardDAO.updateBoard(boardVO);
	}
	
	@Override
	public void deleteBoard(BoardVO boardVO) {
		boardDAO.deleteBoard(boardVO);
	}
	
	// 에러는 리턴값이 있는데 리턴값을 안적어서 에러남.
	@Override
	public BoardVO getBoard(BoardVO boardVO) {
		return boardDAO.getBoard(boardVO);
	}
	
	
	@Override
	public List<BoardVO> getBoardList() {
		return boardDAO.getBoardList();
	}

하고,

root-context, 패키지명 service로 재설정하고, 나머지 beans나 나머지 다 주석처리.
다했으면
Service패키지 -> 클래스생성 ( BoardServiceTest ) main체크하고 finish만들기.
그 안에다가 

// TODO Auto-generated method stub
		// 1. 스프링 컨테이너 구동
		AbstractApplicationContext applicationContext = 
				new GenericXmlApplicationContext("root-context.xml");
		
		// 2. BoardServiceImpl 객체를 Lookup
		BoardService boardService = 
				(BoardService)applicationContext.getBean("boardService");
		
		// 3. 글 등록 테스트
		BoardVO boardVO = new BoardVO();
		boardVO.setBoardTitle("제목");
		boardVO.setBoardContent("글 등록 테스트");
		boardVO.setBoardWriter("관리자");
		
		boardService.insertBoard(boardVO);
		
		// 4. 글 목록 조회 테스트
		List<BoardVO> boardList = boardService.getBoardList();
		for (int i=0; i<boardList.size(); i++) {
			System.out.println(boardList.get(i).toString());
		}
		
		// 5. 스프링 컨테이너 종료
		applicationContext.close();
다 입력.

boardVO로 가기.

알트쉬프트S -> toString -> 전체 toString 만들기.

boardServiceImpl클래스에서
@Service("boardService")이렇게 하고,

boardServiceTest 실행해보기.

실행됐으면
 
mysql가서

CREATE TABLE USER (
	ID VARCHAR(20) PRIMARY KEY,
    PASSWORD VARCHAR(20),
    NAME VARCHAR(20),
    ROLE VARCHAR(5)
 ); 

INSERT INTO USER VALUES('admin', '1234', '관리자', 'ADMIN');

 select * from user;

만들었으면, 

sts와서 클래스만 넣어서 해보기.
UserVO -> UserService ( getUser, join) -> UserServicelmpl -> UserDAO ->
 UserServiceTest(join, getUser 기능 테스트)

- JDBCUtil로 와서
Class.forName("com.mysql.cj.jdbc.Driver"); 이렇게 만들어야됨. jdbc가 지금 지원X